name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      # Set lowercase image name
      - name: Set lowercase image name
        id: vars
        run: echo "image=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
        
      # Step 1: Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      # Step 3: Cache Node.js modules to speed up future builds
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Step 4: Install dependencies
      - name: Install Dependencies
        run: npm ci

      # Step 5: Run semantic-release and extract the new version
      - name: Run Semantic Release and get version
        id: semantic
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          npx semantic-release --dry-run
          VERSION=$(npx semantic-release --dry-run | grep -oE 'Published release ([0-9]+\.[0-9]+\.[0-9]+)' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          npx semantic-release

      # Step 6: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 7: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      # Step 8: Build Docker image
      - name: Build Docker image
        run: |
          docker build --pull --no-cache -t ${{ steps.vars.outputs.image }}:${{ steps.semantic.outputs.version }} .

      # Step 9: Push Docker image
      - name: Push Docker image
        run: |
          docker push ${{ steps.vars.outputs.image }}:${{ steps.semantic.outputs.version }}
